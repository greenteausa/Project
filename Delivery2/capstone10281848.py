# -*- coding: utf-8 -*-
"""Capstone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pbnguu8fdL0XWuRgRuwKpFXssW_Zir46

Import libraries
"""

import pandas as pd
from sklearn.model_selection import train_test_split,cross_val_score
import io
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import LabelBinarizer,MultiLabelBinarizer
from sklearn.feature_extraction import DictVectorizer
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import SGDClassifier, LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from xgboost import XGBClassifier,XGBRFClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score, roc_curve
from sklearn import preprocessing

"""Import the csv file"""

from google.colab import files
uploaded = files.upload()

"""Read the csv file"""

df = pd.read_csv(io.BytesIO(uploaded['mental-heath-in-tech-2016_20161114.csv']))

"""Look at the first five entries"""

df.head()

"""Get statistics from the dataframe"""

df.describe()

"""Get more statistics from the dataframe"""

df.describe(include='all')

"""Get the unique values for the target column so I can recode some of the values"""

df["If yes, what condition(s) have you been diagnosed with?"].unique()

"""Recode some target values"""

df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(["Autism (Aspergers)",'PDD-NOS','Pervasive developmental disorder'],"Austism Spectrum Disorder")
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Anxiety Disorder (Generalized, Social, Phobia, etc)|Asperges'],"Anxiety Disorder (Generalized, Social, Phobia, etc)|Autism Spectrum Disorder")
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Anxiety Disorder (Generalized, Social, Phobia, etc)|Mood Disorder (Depression, Bipolar Disorder, etc)|Post-traumatic Stress Disorder|Addictive Disorder|Autism'],'Anxiety Disorder (Generalized, Social, Phobia, etc)|Mood Disorder (Depression, Bipolar Disorder, etc)|Post-traumatic Stress Disorder|Addictive Disorder|Autism Spectrum Disorder')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(["I haven't been formally diagnosed, so I felt uncomfortable answering, but Social Anxiety and Depression."],"Anxiety Disorder (Generalized, Social, Phobia, etc|Mood Disorder (Depression, Bipolar Disorder, etc)")
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Combination of physical impairment (strongly near-sighted) with a possibly mental one (MCD / "ADHD", though its actually a stimulus filtering impairment)'],"Attention Deficit Hyperactivity Disorder")
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Attention Deficit Hyperactivity Disorder|PTSD (undiagnosed)'],'Attention Deficit Hyperactivity Disorder|Post-traumatic Stress Disorder')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Depression'],'Mood Disorder (Depression, Bipolar Disorder, etc)')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Attention Deficit Hyperactivity Disorder|Pervasive Developmental Disorder (Not Otherwise Specified)'],'Attention Deficit Hyperactivity Disorder|Autism Spectrum Disorder')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Transgender|Mood Disorder (Depression, Bipolar Disorder, etc)|Anxiety Disorder (Generalized, Social, Phobia, etc)'],"Gender Dysphoria|Mood Disorder (Depression, Bipolar Disorder, etc)|Anxiety Disorder (Generalized, Social, Phobia, etc)")
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Anxiety Disorder (Generalized, Social, Phobia, etc)|Dissociative Disorder|Autism'],'Anxiety Disorder (Generalized, Social, Phobia, etc)|Dissociative Disorder|Autism Spectrum Disorder')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Anxiety Disorder (Generalized, Social, Phobia, etc)|Mood Disorder (Depression, Bipolar Disorder, etc)|Dissociative Disorder|Autism'],'Anxiety Disorder (Generalized, Social, Phobia, etc)|Mood Disorder (Depression, Bipolar Disorder, etc)|Dissociative Disorder|Autism Spectrum Disorder')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Psychotic Disorder (Schizophrenia, Schizoaffective, etc)|Obsessive-Compulsive Disorder|ADD (w/o Hyperactivity)'],'Psychotic Disorder (Schizophrenia, Schizoaffective, etc)|Obsessive-Compulsive Disorder|Attention Deficit Hyperactivity Disorder')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Schizotypal Personality Disorder'],'Psychotic Disorder (Schizophrenia, Schizoaffective, etc)')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Anxiety Disorder (Generalized, Social, Phobia, etc)|Post-traumatic Stress Disorder|Stress Response Syndromes|Autism spectrum disorder'],'Anxiety Disorder (Generalized, Social, Phobia, etc)|Post-traumatic Stress Disorder|Stress Response Syndromes|Autism Spectrum Disorder')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(["Sexual addiction"],"Other")
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Traumatic Brain Injury'],"Other")
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Burn out'],'Other')
df["If yes, what condition(s) have you been diagnosed with?"] = df["If yes, what condition(s) have you been diagnosed with?"].replace(['Seasonal Affective Disorder'], 'Other')

"""Drop the rows that are NaN"""

df=df[df["If yes, what condition(s) have you been diagnosed with?"].notna()]

"""Get the length of the the unique values. (This relates to the length of the K-nearest neighbors)"""

len(df["If yes, what condition(s) have you been diagnosed with?"].unique())

"""Fix errors in the age column"""

df["What is your age?"].unique()

df.loc[(df['What is your age?'] >90 ), "What is your age?"] =  34
df.loc[(df["What is your age?"] < 17),"What is your age?"] = 34

"""Get the unique values for gender"""

df["What is your gender?"].unique()

"""Recode the gender column into three distinct categories male, female, genderqueer/other"""

df["What is your gender?"]=df["What is your gender?"].replace(["male","Male ","M","m","man","Cis male","Male.","Male (cis)", "Man", "Sex is male", "cis male","Malr","Dude", "I'm a man why didn't you make this a drop down question. You should have asked sex? And I would of answered yes please. Seriously how much text can this take?","mail","M|","male","Cis Male","Male (trans,FtM)","cisdude","cis man","MALE"],0)
df["What is your gender?"]=df["What is your gender?"].replace(['female',"I identify as female.","female ","Female assigned at birth ","F","Woman","fm","f","Cis female","Transitioned, M2F","Female or Multi-Gender Femme","Female ","woman","female/woman","Cisgender Female","mtf","fem", "Female (props for making this a freeform field, though)"," Female", "Cis-woman", "AFAB","Transgender woman", "Cis female "], 1)
df["What is your gender?"]=df["What is your gender?"].replace(["Bigender","non-binary","Genderfluid (born female)","Other/Transfeminine","Androgynous","male 9:1 female, roughly", "Other","nb masculine","none of your business","genderqueer","Human","Genderfluid","'Enby","genderqueer woman","Queer","Agender","Fluid","Male/genderqueer","Nonbinary","human","Unicorn","Genderqueer","Genderflux demi-girl","female bodied; no feelings about gender"],2)

"""Replace the one NaN with the mode Male"""

df["What is your gender?"]=df["What is your gender?"].replace(np.NaN,'Male')

"""Drop all columns where more than half of the observations have missing values"""

cols = (df.isna().sum() >= df.shape[0]/2).tolist()
drop = df.columns[cols]
df.drop(labels=drop, axis=1, inplace= True)

"""Impute NaN with the mode on every row"""

imp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')
imp.fit(df)
imp_data = pd.DataFrame(data = imp.transform(df), columns = df.columns)

"""Describe the dataset"""

imp_data.describe()

cols = [x for x in imp_data.columns if x not in ["What is your age?","Why or why not?","Why or why not?.1","What country do you live in?","What US state or territory do you live in?","What country do you work in?","What US state or territory do you work in?","Which of the following best describes your work position?"]]
data_to_encode = imp_data[cols]
data_not_encode = imp_data[["What is your age?","Why or why not?","Why or why not?.1","What country do you live in?","What US state or territory do you live in?","What country do you work in?","What US state or territory do you work in?","Which of the following best describes your work position?"]]

def encode(data):
  cat_columns = list(data.select_dtypes(include=['category','object']))
  mlb = MultiLabelBinarizer()

  for col in cat_columns:
    data[col] = data[col].astype('str')
    data[col]=mlb.fit_transform(data[col])
  
  return data

encode(data_to_encode)
matrix = encode(data_to_encode)
encoded_data = pd.DataFrame(matrix)
encoded_data.columns = data_to_encode.columns
prep_data = pd.concat(objs = [encoded_data, data_not_encode], axis = 1)

model_data = prep_data.copy()
col_numeric = [cols for cols in model_data.columns if model_data[cols].dtype in ['int64','float64']]
model_data = model_data[col_numeric]

y = model_data['If yes, what condition(s) have you been diagnosed with?']

cols = [col for col in model_data.columns if col not in ['If yes, what condition(s) have you been diagnosed with?']]
X = model_data[cols]

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = .2, random_state = 42)

def model_assess(model,name='Default'):
  model.fit(X_train,y_train)
  preds = model.predict(X_test)
  print('---',name,'---','\n',confusion_matrix(y_test,preds),'\n','Accuracy:', round(accuracy_score(y_test, preds),5),'\n')

nb = GaussianNB()
model_assess(nb, name='Naive Bayes')
cross_val_score(nb,X,y,n_jobs = -1)

sgd = SGDClassifier(max_iter=5000, random_state=42)
model_assess(sgd, name='SGD')
cross_val_score(sgd,X,y,n_jobs = -1)

tree = DecisionTreeClassifier()
model_assess(tree,"Decision Trees")
cross_val_score(tree,X,y,n_jobs = -1)

rforest = RandomForestClassifier(max_depth= 10, random_state=42)
model_assess(rforest,"Random Forest")
cross_val_score(rforest,X,y,n_jobs=-1)

